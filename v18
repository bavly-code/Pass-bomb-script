local Players = game:GetService("Players")
local CoreGui = game:GetService("CoreGui")
local TweenService = game:GetService("TweenService")
local UserInputService = game:GetService("UserInputService")
local RunService = game:GetService("RunService")
local player = Players.LocalPlayer

-- Create ScreenGui with protection
local gui = Instance.new("ScreenGui")
gui.Name = math.random(1000000,9999999) -- Random name for protection
gui.ResetOnSpawn = false
gui.Parent = CoreGui

-- Notification System
local function createNotification(message, type)
    local notif = Instance.new("Frame")
    notif.Size = UDim2.new(0, 250, 0, 60)
    notif.Position = UDim2.new(1, -270, 1, -80)
    notif.BackgroundColor3 = Color3.fromRGB(40, 40, 40)
    notif.BorderSizePixel = 0
    
    local corner = Instance.new("UICorner")
    corner.CornerRadius = UDim.new(0, 6)
    corner.Parent = notif
    
    local color = type == "success" and Color3.fromRGB(0, 255, 127) or Color3.fromRGB(255, 75, 75)
    local indicator = Instance.new("Frame")
    indicator.Size = UDim2.new(0, 4, 1, 0)
    indicator.BackgroundColor3 = color
    indicator.BorderSizePixel = 0
    
    local indicatorCorner = Instance.new("UICorner")
    indicatorCorner.CornerRadius = UDim.new(0, 2)
    indicatorCorner.Parent = indicator
    indicator.Parent = notif
    local text = Instance.new("TextLabel")
    text.Size = UDim2.new(1, -50, 1, 0)
    text.Position = UDim2.new(0, 15, 0, 0)
    text.BackgroundTransparency = 1
    text.Text = message
    text.TextColor3 = Color3.fromRGB(255, 255, 255)
    text.TextWrapped = true
    text.Font = Enum.Font.Gotham
    text.TextSize = 14
    text.TextXAlignment = Enum.TextXAlignment.Left
    text.Parent = notif
    
    local closeBtn = Instance.new("TextButton")
    closeBtn.Size = UDim2.new(0, 20, 0, 20)
    closeBtn.Position = UDim2.new(1, -25, 0, 5)
    closeBtn.BackgroundTransparency = 1
    closeBtn.Text = "Ã—"
    closeBtn.TextColor3 = Color3.fromRGB(255, 255, 255)
    closeBtn.Font = Enum.Font.GothamBold
    closeBtn.TextSize = 20
    closeBtn.Parent = notif
    
    -- Hover effect for close button
    closeBtn.MouseEnter:Connect(function()
        closeBtn.TextColor3 = color
    end)
    
    closeBtn.MouseLeave:Connect(function()
        closeBtn.TextColor3 = Color3.fromRGB(255, 255, 255)
    end)
    
    closeBtn.MouseButton1Click:Connect(function()
        notif:Destroy()
    end)
    
    notif.Parent = gui
    
    -- Slide in animation
    notif.Position = UDim2.new(1, 0, 1, -80)
    TweenService:Create(notif, TweenInfo.new(0.3, Enum.EasingStyle.Quad), {
        Position = UDim2.new(1, -270, 1, -80)
    }):Play()
    
    -- Auto-remove after 5 seconds
    task.delay(5, function()
        if notif and notif.Parent then
            TweenService:Create(notif, TweenInfo.new(0.3, Enum.EasingStyle.Quad), {
                Position = UDim2.new(1, 0, 1, -80)
            }):Play()
            task.wait(0.3)
            notif:Destroy()
        end
    end)
end
-- Main Frame Setup with Enhanced Design
local mainFrame = Instance.new("Frame")
mainFrame.Size = UDim2.new(0, 500, 0, 350)
mainFrame.Position = UDim2.new(0.5, -250, 0.5, -175)
mainFrame.BackgroundColor3 = Color3.fromRGB(35, 35, 35)
mainFrame.Parent = gui

-- Add smooth shadow
local shadow = Instance.new("ImageLabel")
shadow.Size = UDim2.new(1, 40, 1, 40)
shadow.Position = UDim2.new(0, -20, 0, -20)
shadow.BackgroundTransparency = 1
shadow.Image = "rbxassetid://5554236805"
shadow.ImageColor3 = Color3.fromRGB(0, 0, 0)
shadow.ImageTransparency = 0.6
shadow.Parent = mainFrame

local corner = Instance.new("UICorner")
corner.CornerRadius = UDim.new(0, 8)
corner.Parent = mainFrame

-- Title Bar with enhanced design
local titleBar = Instance.new("Frame")
titleBar.Size = UDim2.new(1, 0, 0, 30)
titleBar.BackgroundColor3 = Color3.fromRGB(45, 45, 45)
titleBar.Parent = mainFrame

local titleCorner = Instance.new("UICorner")
titleCorner.CornerRadius = UDim.new(0, 8)
titleCorner.Parent = titleBar

-- Content Areas
local sideBar = Instance.new("Frame")
sideBar.Size = UDim2.new(0, 150, 1, -30)
sideBar.Position = UDim2.new(0, 0, 0, 30)
sideBar.BackgroundColor3 = Color3.fromRGB(40, 40, 40)
sideBar.Parent = mainFrame

local contentFrame = Instance.new("Frame")
contentFrame.Size = UDim2.new(1, -160, 1, -40)
contentFrame.Position = UDim2.new(0, 155, 0, 35)
contentFrame.BackgroundColor3 = Color3.fromRGB(35, 35, 35)
contentFrame.Parent = mainFrame
-- Enhanced Button Creation with Hover Effects
local function createSectionButton(text, yPos)
    local button = Instance.new("TextButton")
    button.Size = UDim2.new(0.9, 0, 0, 40)
    button.Position = UDim2.new(0.05, 0, 0, yPos)
    button.BackgroundColor3 = Color3.fromRGB(45, 45, 45)
    button.Text = text
    button.TextColor3 = Color3.fromRGB(255, 255, 255)
    button.Font = Enum.Font.GothamBold
    button.TextSize = 14
    button.AutoButtonColor = false
    
    local buttonCorner = Instance.new("UICorner")
    buttonCorner.CornerRadius = UDim.new(0, 6)
    buttonCorner.Parent = button
    
    -- Hover Effects
    button.MouseEnter:Connect(function()
        button.MouseCursor = "PointingHand"
        TweenService:Create(button, TweenInfo.new(0.2), {
            BackgroundColor3 = Color3.fromRGB(55, 55, 55)
        }):Play()
    end)
    
    button.MouseLeave:Connect(function()
        TweenService:Create(button, TweenInfo.new(0.2), {
            BackgroundColor3 = Color3.fromRGB(45, 45, 45)
        }):Play()
    end)
    
    button.Parent = sideBar
    return button
end

-- Improved Toggle Switch with Visual Feedback
local function createToggleSwitch(parent, text, yPos)
    local container = Instance.new("Frame")
    container.Size = UDim2.new(1, 0, 0, 40)
    container.Position = UDim2.new(0, 0, 0, yPos)
    container.BackgroundColor3 = Color3.fromRGB(40, 40, 40)
    
    local containerCorner = Instance.new("UICorner")
    containerCorner.CornerRadius = UDim.new(0, 6)
    containerCorner.Parent = container
    local label = Instance.new("TextLabel")
    label.Size = UDim2.new(0.7, 0, 1, 0)
    label.Position = UDim2.new(0, 15, 0, 0)
    label.BackgroundTransparency = 1
    label.Text = text
    label.TextColor3 = Color3.fromRGB(255, 255, 255)
    label.Font = Enum.Font.Gotham
    label.TextSize = 14
    label.TextXAlignment = Enum.TextXAlignment.Left
    label.Parent = container

    local toggleFrame = Instance.new("Frame")
    toggleFrame.Size = UDim2.new(0, 44, 0, 24)
    toggleFrame.Position = UDim2.new(0.85, 0, 0.5, -12)
    toggleFrame.BackgroundColor3 = Color3.fromRGB(60, 60, 60)
    toggleFrame.MouseCursor = "PointingHand"
    
    local toggleCorner = Instance.new("UICorner")
    toggleCorner.CornerRadius = UDim.new(1, 0)
    toggleCorner.Parent = toggleFrame

    local switch = Instance.new("Frame")
    switch.Size = UDim2.new(0, 20, 0, 20)
    switch.Position = UDim2.new(0, 2, 0.5, -10)
    switch.BackgroundColor3 = Color3.fromRGB(255, 255, 255)
    
    local switchCorner = Instance.new("UICorner")
    switchCorner.CornerRadius = UDim.new(1, 0)
    switchCorner.Parent = switch

    -- Hitbox State Management
    local enabled = false
    local function updateToggle()
        enabled = not enabled
        local newPos = enabled and UDim2.new(1, -22, 0.5, -10) or UDim2.new(0, 2, 0.5, -10)
        local newColor = enabled and Color3.fromRGB(0, 255, 127) or Color3.fromRGB(255, 255, 255)
        
        TweenService:Create(switch, TweenInfo.new(0.2), {
            Position = newPos,
            BackgroundColor3 = newColor
        }):Play()
        
        return enabled
    end
-- Hitbox Manipulation System
local function modifyHitbox(character, enabled, size)
    if not character then return end
    
    local humanoidRootPart = character:FindFirstChild("HumanoidRootPart")
    if not humanoidRootPart then return end
    
    -- Core hitbox modification
    humanoidRootPart.Size = enabled and Vector3.new(size, size, size) or Vector3.new(2, 2, 1)
    humanoidRootPart.Transparency = enabled and 0.5 or 1
    humanoidRootPart.CanCollide = not enabled -- Inverse for bomb pass prevention
    
    -- Advanced bomb pass prevention
    local function preventBombPass()
        if enabled then
            humanoidRootPart.CustomPhysicalProperties = PhysicalProperties.new(
                math.huge, -- Density
                0, -- Friction
                0, -- Elasticity
                0, -- FrictionWeight
                0  -- ElasticityWeight
            )
        else
            humanoidRootPart.CustomPhysicalProperties = PhysicalProperties.new(0.7, 0.3, 0.5)
        end
    end
    
    preventBombPass()
    
    -- Visual feedback
    local visual = humanoidRootPart:FindFirstChild("HitboxVisual")
    if visual then visual:Destroy() end
    
    if enabled then
        visual = Instance.new("SelectionBox")
        visual.Name = "HitboxVisual"
        visual.Color3 = Color3.fromRGB(0, 255, 127)
        visual.LineThickness = 0.05
        visual.Transparency = 0.3
        visual.Adornee = humanoidRootPart
        visual.Parent = humanoidRootPart
    end
end
-- Enhanced Player Selection System
local function createPlayerList(parent)
    local listContainer = Instance.new("ScrollingFrame")
    listContainer.Size = UDim2.new(1, -20, 0.4, 0)
    listContainer.Position = UDim2.new(0, 10, 0, 10)
    listContainer.BackgroundColor3 = Color3.fromRGB(40, 40, 40)
    listContainer.BorderSizePixel = 0
    listContainer.ScrollBarThickness = 4
    listContainer.ScrollBarImageColor3 = Color3.fromRGB(0, 255, 127)
    
    local UIListLayout = Instance.new("UIListLayout")
    UIListLayout.Padding = UDim.new(0, 5)
    UIListLayout.Parent = listContainer
    
    local selectedPlayers = {}
    
    local function refreshList()
        for _, item in pairs(listContainer:GetChildren()) do
            if item:IsA("TextButton") then
                item:Destroy()
            end
        end
        
        for _, plr in pairs(Players:GetPlayers()) do
            if plr ~= player then
                local btn = Instance.new("TextButton")
                btn.Size = UDim2.new(1, -10, 0, 30)
                btn.BackgroundColor3 = Color3.fromRGB(45, 45, 45)
                btn.Text = plr.Name
                btn.TextColor3 = Color3.fromRGB(255, 255, 255)
                btn.Font = Enum.Font.Gotham
                btn.TextSize = 14
                btn.Parent = listContainer
                
                local btnCorner = Instance.new("UICorner")
                btnCorner.CornerRadius = UDim.new(0, 6)
                btnCorner.Parent = btn
                
                -- Selection handling
                btn.MouseButton1Click:Connect(function()
                    selectedPlayers[plr] = not selectedPlayers[plr]
                    btn.BackgroundColor3 = selectedPlayers[plr] 
                        and Color3.fromRGB(0, 255, 127) 
                        or Color3.fromRGB(45, 45, 45)
                end)
            end
        end
    end
    
    refreshList()
    Players.PlayerAdded:Connect(refreshList)
    Players.PlayerRemoving:Connect(refreshList)
    
    return listContainer, selectedPlayers
end
-- Enhanced Slider with Real-time Updates
local function createSlider(parent, text, yPos, minValue, maxValue, defaultValue)
    local container = Instance.new("Frame")
    container.Size = UDim2.new(1, 0, 0, 80)
    container.Position = UDim2.new(0, 0, 0, yPos)
    container.BackgroundColor3 = Color3.fromRGB(40, 40, 40)
    
    local containerCorner = Instance.new("UICorner")
    containerCorner.CornerRadius = UDim.new(0, 6)
    containerCorner.Parent = container
    
    local label = Instance.new("TextLabel")
    label.Size = UDim2.new(1, -20, 0, 30)
    label.Position = UDim2.new(0, 15, 0, 0)
    label.BackgroundTransparency = 1
    label.Text = text
    label.TextColor3 = Color3.fromRGB(255, 255, 255)
    label.Font = Enum.Font.Gotham
    label.TextSize = 14
    label.TextXAlignment = Enum.TextXAlignment.Left
    label.Parent = container
    
    local sliderBar = Instance.new("Frame")
    sliderBar.Size = UDim2.new(0.7, 0, 0, 6)
    sliderBar.Position = UDim2.new(0.15, 0, 0.6, 0)
    sliderBar.BackgroundColor3 = Color3.fromRGB(60, 60, 60)
    sliderBar.Parent = container
    
    local sliderFill = Instance.new("Frame")
    sliderFill.Size = UDim2.new(0.5, 0, 1, 0)
    sliderFill.BackgroundColor3 = Color3.fromRGB(0, 255, 127)
    sliderFill.Parent = sliderBar
    local sliderButton = Instance.new("TextButton")
    sliderButton.Size = UDim2.new(0, 16, 0, 16)
    sliderButton.Position = UDim2.new(0.5, -8, 0.5, -8)
    sliderButton.BackgroundColor3 = Color3.fromRGB(255, 255, 255)
    sliderButton.Text = ""
    sliderButton.Parent = sliderBar
    
    local buttonCorner = Instance.new("UICorner")
    buttonCorner.CornerRadius = UDim.new(1, 0)
    buttonCorner.Parent = sliderButton
    
    local valueBox = Instance.new("TextBox")
    valueBox.Size = UDim2.new(0.15, 0, 0, 25)
    valueBox.Position = UDim2.new(0.8, 0, 0.45, 0)
    valueBox.BackgroundColor3 = Color3.fromRGB(50, 50, 50)
    valueBox.Text = tostring(defaultValue)
    valueBox.TextColor3 = Color3.fromRGB(255, 255, 255)
    valueBox.Font = Enum.Font.Gotham
    valueBox.TextSize = 14
    valueBox.Parent = container
    
    local valueCorner = Instance.new("UICorner")
    valueCorner.CornerRadius = UDim.new(0, 4)
    valueCorner.Parent = valueBox
    
    -- Slider Functionality
    local dragging = false
    local function updateSlider(input)
        local relativePos = math.clamp((input.Position.X - sliderBar.AbsolutePosition.X) / sliderBar.AbsoluteSize.X, 0, 1)
        local value = math.floor(minValue + (maxValue - minValue) * relativePos)
        
        sliderFill.Size = UDim2.new(relativePos, 0, 1, 0)
        sliderButton.Position = UDim2.new(relativePos, -8, 0.5, -8)
        valueBox.Text = tostring(value)
        
        return value
    end
    -- Connect Slider Events
    sliderButton.MouseButton1Down:Connect(function()
        dragging = true
    end)
    
    UserInputService.InputEnded:Connect(function(input)
        if input.UserInputType == Enum.UserInputType.MouseButton1 then
            dragging = false
        end
    end)
    
    UserInputService.InputChanged:Connect(function(input)
        if dragging and input.UserInputType == Enum.UserInputType.MouseMovement then
            local value = updateSlider(input)
            -- Update hitbox sizes in real-time
            if selectedPlayers then
                for plr, selected in pairs(selectedPlayers) do
                    if selected and plr.Character then
                        modifyHitbox(plr.Character, true, value)
                    end
                end
            end
        end
    end)
    
    -- Value Box Input
    valueBox.FocusLost:Connect(function(enterPressed)
        if enterPressed then
            local inputValue = tonumber(valueBox.Text)
            if inputValue then
                inputValue = math.clamp(inputValue, minValue, maxValue)
                local relativePos = (inputValue - minValue) / (maxValue - minValue)
                sliderFill.Size = UDim2.new(relativePos, 0, 1, 0)
                sliderButton.Position = UDim2.new(relativePos, -8, 0.5, -8)
                valueBox.Text = tostring(inputValue)
                
                -- Update hitboxes based on new value
                if selectedPlayers then
                    for plr, selected in pairs(selectedPlayers) do
                        if selected and plr.Character then
                            modifyHitbox(plr.Character, true, inputValue)
                        end
                    end
                end
            end
        end
    end)
    
    return container, sliderButton, valueBox
end
-- Create Sections
local personalHitboxSection = Instance.new("Frame")
personalHitboxSection.Size = UDim2.new(1, 0, 1, 0)
personalHitboxSection.BackgroundTransparency = 1
personalHitboxSection.Visible = true
personalHitboxSection.Parent = contentFrame

local hitboxExpanderSection = Instance.new("Frame")
hitboxExpanderSection.Size = UDim2.new(1, 0, 1, 0)
hitboxExpanderSection.BackgroundTransparency = 1
hitboxExpanderSection.Visible = false
hitboxExpanderSection.Parent = contentFrame

-- Create Section Buttons
local personalButton = createSectionButton("Personal Hitbox", 10)
local expanderButton = createSectionButton("Hitbox Expander", 60)

-- Create Personal Hitbox Controls
local personalToggle = createToggleSwitch(personalHitboxSection, "Enable Personal Hitbox", 10)
local personalSlider = createSlider(personalHitboxSection, "Hitbox Size", 60, 2, 20, 2)

-- Create Hitbox Expander Controls
local playerList, selectedPlayers = createPlayerList(hitboxExpanderSection)
local expanderToggle = createToggleSwitch(hitboxExpanderSection, "Enable Global Hitbox", 220)
local expanderSlider = createSlider(hitboxExpanderSection, "Global Size", 270, 2, 20, 2)

-- Initialize Success Notification
createNotification("Hitbox Controller loaded successfully!", "success")
-- Section Switching Logic
personalButton.MouseButton1Click:Connect(function()
    personalHitboxSection.Visible = true
    hitboxExpanderSection.Visible = false
    personalButton.BackgroundColor3 = Color3.fromRGB(0, 255, 127)
    expanderButton.BackgroundColor3 = Color3.fromRGB(45, 45, 45)
end)

expanderButton.MouseButton1Click:Connect(function()
    personalHitboxSection.Visible = false
    hitboxExpanderSection.Visible = true
    expanderButton.BackgroundColor3 = Color3.fromRGB(0, 255, 127)
    personalButton.BackgroundColor3 = Color3.fromRGB(45, 45, 45)
end)

-- Character Added Handling
local function onCharacterAdded(char)
    if personalToggle.Enabled then
        modifyHitbox(char, true, tonumber(personalSlider.Value))
    end
end

player.CharacterAdded:Connect(onCharacterAdded)

-- Auto-Update Loop
RunService.Heartbeat:Connect(function()
    if expanderToggle.Enabled then
        for plr, selected in pairs(selectedPlayers) do
            if selected and plr.Character then
                modifyHitbox(plr.Character, true, tonumber(expanderSlider.Value))
            end
        end
    end
end)

-- Cleanup on script end
gui.Destroying:Connect(function()
    -- Reset all hitboxes
    for _, plr in pairs(Players:GetPlayers()) do
        if plr.Character then
            modifyHitbox(plr.Character, false, 2)
        end
    end
end)
