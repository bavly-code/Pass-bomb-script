-- Pass The Bomb v1.2.13
-- Complete implementation with all features and systems
local OrionLib = loadstring(game:HttpGet(('https://raw.githubusercontent.com/shlexware/Orion/main/source')))()
local Players = game:GetService("Players")
local RunService = game:GetService("RunService")
local UserInputService = game:GetService("UserInputService")
local TweenService = game:GetService("TweenService")
local HttpService = game:GetService("HttpService")
local CoreGui = game:GetService("CoreGui")
local LocalPlayer = Players.LocalPlayer
local Camera = workspace.CurrentCamera
local Mouse = LocalPlayer:GetMouse()

-- Comprehensive Settings
getgenv().Settings = {
    ESP = {
        Enabled = false,
        BoxESP = false,
        ChamsESP = false,
        TracerESP = false,
        SkeletonESP = false,
        HeadDotESP = false,
        HealthBarESP = false,
        ToolESP = false,
        TeamCheck = false,
        ShowDistance = false,
        ShowNames = false,
        ShowHealth = false,
        RainbowESP = false,
        BoxColor = Color3.fromRGB(255,0,0),
        ChamsColor = Color3.fromRGB(255,0,0),
        TracerColor = Color3.fromRGB(255,0,0),
        SkeletonColor = Color3.fromRGB(255,255,255),
        HeadDotColor = Color3.fromRGB(255,0,0),
        HealthBarColor = Color3.fromRGB(0,255,0),
        FillTransparency = 0.5,
        OutlineTransparency = 0,
        TracerOrigin = "Bottom", -- Bottom, Mouse, Top
        RenderDistance = 1000,
        TextSize = 13,
        TextFont = 2,
        BoxThickness = 1,
        TracerThickness = 1,
        SkeletonThickness = 1
    },
    Hitbox = {
        Regular = {
            Enabled = false,
            Size = Vector3.new(10, 10, 10),
            Transparency = 0.7,
            TeamCheck = false,
            Color = Color3.fromRGB(255,0,0)
        },
        Alternative = {
            Enabled = false,
            Size = Vector3.new(15, 15, 15),
            TouchPart = true,
            CustomPart = false,
            PartProperties = {
                CanCollide = false,
                Massless = true,
                Transparency = 1
            }
        },
        Advanced = {
            Enabled = false,
            HeadSize = Vector3.new(8, 8, 8),
            TorsoSize = Vector3.new(10, 10, 10),
            ArmsSize = Vector3.new(6, 6, 6),
            LegsSize = Vector3.new(6, 6, 6)
        },
        RemoveSelf = false,
        ShowHitbox = false,
        RainbowHitbox = false
    },
    Movement = {
        WalkSpeed = 16,
        JumpPower = 50,
        TPWalk = {
            Enabled = false,
            Speed = 3,
            Method = "Regular",
            BypassCheck = false
        },
        Fly = {
            Enabled = false,
            Speed = 50,
            Method = "Regular",
            NoClip = true
        },
        Noclip = false,
        InfiniteJump = false,
        LoopWS = false,
        LoopJP = false,
        AntiSlip = false,
        BunnyHop = false,
        AutoJump = false,
        SpeedBoost = false,
        VehicleMods = {
            Enabled = false,
            Speed = 100,
            JumpHeight = 50
        }
    },
    AutoPass = {
        Enabled = false,
        SmoothTP = true,
        ReturnToSpawn = true,
        PassDelay = 0.05,
        DetectionRange = 15,
        AvoidRepeat = true,
        SmartTarget = true,
        PredictMovement = false,
        TargetPriority = "Distance", -- Distance, Health, Random
        BlacklistedPlayers = {},
        CustomTargets = {},
        AutoReturn = {
            Enabled = false,
            Delay = 1,
            Position = nil
        }
    },
    Combat = {
        AutoDodge = false,
        PredictMovement = false,
        SafeDistance = 10,
        AutoBlock = false,
        AutoCounter = false,
        ReactionTime = 0.15
    },
    Players = {
        SelectedPlayer = nil,
        Whitelist = {},
        Blacklist = {},
        Friends = {},
        TeamMembers = {},
        Priorities = {}
    },
    UI = {
        Theme = "Default",
        CustomColors = {
            Background = Color3.fromRGB(30, 30, 30),
            Text = Color3.fromRGB(255, 255, 255),
            Border = Color3.fromRGB(20, 20, 20),
            Accent = Color3.fromRGB(0, 85, 255)
        },
        ToggleKey = Enum.KeyCode.RightControl,
        MinimizeKey = Enum.KeyCode.RightAlt,
        FastClose = Enum.KeyCode.End,
        Transparency = 0.95,
        ShowKeybinds = true,
        ShowWatermark = true
    },
    Debug = {
        Enabled = false,
        ShowFPS = false,
        ShowPing = false,
        ShowPosition = false,
        LogActions = false,
        SaveLogs = false
    },
    Performance = {
        OptimizeESP = false,
        ReduceRenderDistance = false,
        DisableParticles = false,
        LowGraphics = false,
        MaxPlayers = 100
    },
    Config = {
        AutoSave = true,
        SaveInterval = 60,
        LoadOnLaunch = true,
        ConfigName = "DefaultConfig",
        LastSave = 0
    }
}

-- Cache Systems
local ESPCache = {
    Boxes = {},
    Tracers = {},
    Names = {},
    Health = {},
    Distance = {},
    Skeletons = {},
    HeadDots = {},
    Tools = {}
}
local ChamsCache = {}
local HitboxCache = {}
local ConnectionCache = {}
local TargetCache = {}

-- Core Function Implementation
local function CreateDrawing(type, properties)
    local drawing = Drawing.new(type)
    for property, value in pairs(properties) do
        drawing[property] = value
    end
    return drawing
end

-- Complete ESP System
local function InitializeESP()
    for _, player in pairs(Players:GetPlayers()) do
        if player ~= LocalPlayer then
            -- Box ESP
            ESPCache.Boxes[player] = {
                Box = CreateDrawing("Square", {
                    Visible = false,
                    Color = Settings.ESP.BoxColor,
                    Thickness = Settings.ESP.BoxThickness,
                    Filled = false
                }),
                Outline = CreateDrawing("Square", {
                    Visible = false,
                    Color = Color3.new(0,0,0),
                    Thickness = Settings.ESP.BoxThickness + 2,
                    Filled = false
                })
            }
            
            -- Tracer ESP
            ESPCache.Tracers[player] = CreateDrawing("Line", {
                Visible = false,
                Color = Settings.ESP.TracerColor,
                Thickness = Settings.ESP.TracerThickness
            })
            
            -- Skeleton ESP
            ESPCache.Skeletons[player] = {
                Head = CreateDrawing("Line", {
                    Visible = false,
                    Color = Settings.ESP.SkeletonColor,
                    Thickness = Settings.ESP.SkeletonThickness
                }),
                Torso = CreateDrawing("Line", {
                    Visible = false,
                    Color = Settings.ESP.SkeletonColor,
                    Thickness = Settings.ESP.SkeletonThickness
                }),
                LeftArm = CreateDrawing("Line", {
                    Visible = false,
                    Color = Settings.ESP.SkeletonColor,
                    Thickness = Settings.ESP.SkeletonThickness
                }),
                RightArm = CreateDrawing("Line", {
                    Visible = false,
                    Color = Settings.ESP.SkeletonColor,
                    Thickness = Settings.ESP.SkeletonThickness
                }),
                LeftLeg = CreateDrawing("Line", {
                    Visible = false,
                    Color = Settings.ESP.SkeletonColor,
                    Thickness = Settings.ESP.SkeletonThickness
                }),
                RightLeg = CreateDrawing("Line", {
                    Visible = false,
                    Color = Settings.ESP.SkeletonColor,
                    Thickness = Settings.ESP.SkeletonThickness
                })
            }
            
            -- Head Dot ESP
            ESPCache.HeadDots[player] = CreateDrawing("Circle", {
                Visible = false,
                Color = Settings.ESP.HeadDotColor,
                Thickness = 1,
                NumSides = 30,
                Radius = 3,
                Filled = true
            })
            
            -- Health Bar ESP
            ESPCache.Health[player] = {
                Bar = CreateDrawing("Square", {
                    Visible = false,
                    Color = Settings.ESP.HealthBarColor,
                    Thickness = 1,
                    Filled = true
                }),
                Background = CreateDrawing("Square", {
                    Visible = false,
                    Color = Color3.new(0,0,0),
                    Thickness = 1,
                    Filled = true
                })
            }
            
            -- Name ESP
            ESPCache.Names[player] = CreateDrawing("Text", {
                Visible = false,
                Color = Settings.ESP.BoxColor,
                Size = Settings.ESP.TextSize,
                Center = true,
                Outline = true,
                Font = Settings.ESP.TextFont
            })
            
            -- Distance ESP
            ESPCache.Distance[player] = CreateDrawing("Text", {
                Visible = false,
                Color = Settings.ESP.BoxColor,
                Size = Settings.ESP.TextSize,
                Center = true,
                Outline = true,
                Font = Settings.ESP.TextFont
            })
            
            -- Tool ESP
            ESPCache.Tools[player] = CreateDrawing("Text", {
                Visible = false,
                Color = Settings.ESP.BoxColor,
                Size = Settings.ESP.TextSize,
                Center = true,
                Outline = true,
                Font = Settings.ESP.TextFont
            })
            
            -- Chams ESP
            ChamsCache[player] = Instance.new("Highlight")
            ChamsCache[player].FillColor = Settings.ESP.ChamsColor
            ChamsCache[player].OutlineColor = Color3.new(1,1,1)
            ChamsCache[player].FillTransparency = Settings.ESP.FillTransparency
            ChamsCache[player].OutlineTransparency = Settings.ESP.OutlineTransparency
            ChamsCache[player].Parent = CoreGui
        end
    end
end

-- Comprehensive Hitbox System
local function UpdateHitboxes()
    for _, player in pairs(Players:GetPlayers()) do
        if player ~= LocalPlayer or not Settings.Hitbox.RemoveSelf then
            if player.Character then
                -- Regular Hitbox
                if Settings.Hitbox.Regular.Enabled then
                    local hrp = player.Character:FindFirstChild("HumanoidRootPart")
                    if hrp then
                        hrp.Size = Settings.Hitbox.Regular.Size
                        hrp.Transparency = Settings.Hitbox.Regular.Transparency
                        hrp.CanCollide = false
                        if Settings.Hitbox.ShowHitbox then
                            hrp.Material = Enum.Material.ForceField
                        end
                        if Settings.Hitbox.RainbowHitbox then
                            hrp.Color = Color3.fromHSV(tick() % 5 / 5, 1, 1)
                        else
                            hrp.Color = Settings.Hitbox.Regular.Color
                        end
                    end
                end

                -- Alternative Hitbox
                if Settings.Hitbox.Alternative.Enabled then
                    if not HitboxCache[player] then
                        local touchPart = Instance.new("Part")
                        touchPart.Size = Settings.Hitbox.Alternative.Size
                        touchPart.Transparency = 1
                        touchPart.CanCollide = Settings.Hitbox.Alternative.PartProperties.CanCollide
                        touchPart.Massless = Settings.Hitbox.Alternative.PartProperties.Massless
                        
                        local weld = Instance.new("WeldConstraint")
                        weld.Part0 = touchPart
                        weld.Part1 = player.Character.HumanoidRootPart
                        weld.Parent = touchPart
                        
                        touchPart.Parent = player.Character
                        HitboxCache[player] = touchPart
                    end
                end

                -- Advanced Hitbox
                if Settings.Hitbox.Advanced.Enabled then
                    local head = player.Character:FindFirstChild("Head")
                    local torso = player.Character:FindFirstChild("UpperTorso") or player.Character:FindFirstChild("Torso")
                    local leftArm = player.Character:FindFirstChild("LeftUpperArm") or player.Character:FindFirstChild("Left Arm")
                    local rightArm = player.Character:FindFirstChild("RightUpperArm") or player.Character:FindFirstChild("Right Arm")
                    local leftLeg = player.Character:FindFirstChild("LeftUpperLeg") or player.Character:FindFirstChild("Left Leg")
                    local rightLeg = player.Character:FindFirstChild("RightUpperLeg") or player.Character:FindFirstChild("Right Leg")
                    
                    if head then head.Size = Settings.Hitbox.Advanced.HeadSize end
                    if torso then torso.Size = Settings.Hitbox.Advanced.TorsoSize end
                    if leftArm then leftArm.Size = Settings.Hitbox.Advanced.ArmsSize end
                    if rightArm then rightArm.Size = Settings.Hitbox.Advanced.ArmsSize end
                    if leftLeg then leftLeg.Size = Settings.Hitbox.Advanced.LegsSize end
                    if rightLeg then rightLeg.Size = Settings.Hitbox.Advanced.LegsSize end
                end
            end
        end
    end
end

-- Advanced Movement System
local function InitializeMovement()
    local function SetupFly()
        local bp = Instance.new("BodyPosition")
        bp.MaxForce = Vector3.new(math.huge, math.huge, math.huge)
        bp.P = 10000
        bp.Position = LocalPlayer.Character.HumanoidRootPart.Position
        bp.Parent = LocalPlayer.Character.HumanoidRootPart
        return bp
    end

    local function UpdateFly(bp)
        local forward = Camera.CFrame.LookVector
        local right = Camera.CFrame.RightVector
        local up = Camera.CFrame.UpVector
        local pos = Vector3.new(0,0,0)

        if UserInputService:IsKeyDown(Enum.KeyCode.W) then
            pos = pos + forward
        end
        if UserInputService:IsKeyDown(Enum.KeyCode.S) then
            pos = pos - forward
        end
        if UserInputService:IsKeyDown(Enum.KeyCode.D) then
            pos = pos + right
        end
        if UserInputService:IsKeyDown(Enum.KeyCode.A) then
            pos = pos - right
        end
        if UserInputService:IsKeyDown(Enum.KeyCode.Space) then
            pos = pos + up
        end
        if UserInputService:IsKeyDown(Enum.KeyCode.LeftControl) then
            pos = pos - up
        end

        bp.Position = bp.Position + (pos.Unit * Settings.Movement.Fly.Speed)
    end

    -- TPWalk Implementation
    local function TPWalk()
        if Settings.Movement.TPWalk.Enabled and LocalPlayer.Character then
            local hrp = LocalPlayer.Character:FindFirstChild("HumanoidRootPart")
            local humanoid = LocalPlayer.Character:FindFirstChild("Humanoid")
            
            if hrp and humanoid and humanoid.MoveDirection.Magnitude > 0 then
                local tpVector = humanoid.MoveDirection * Settings.Movement.TPWalk.Speed
                if Settings.Movement.TPWalk.BypassCheck then
                    hrp.CFrame = CFrame.new(hrp.Position + tpVector)
                else
                    hrp.CFrame = hrp.CFrame + tpVector
                end
            end
        end
    end

    -- Anti-Slip Implementation
    local function ApplyAntiSlip()
        if Settings.Movement.AntiSlip and LocalPlayer.Character then
            local humanoid = LocalPlayer.Character:FindFirstChild("Humanoid")
            if humanoid then
                humanoid.MaxSlopeAngle = 89
                humanoid.WalkSpeed = Settings.Movement.WalkSpeed
                
                for _, part in pairs(LocalPlayer.Character:GetDescendants()) do
                    if part:IsA("BasePart") then
                        part.CustomPhysicalProperties = PhysicalProperties.new(0, 0, 0, 0, 0)
                    end
                end
            end
        end
    end

    -- Vehicle Modifications
    local function ModifyVehicle(vehicle)
        if Settings.Movement.VehicleMods.Enabled then
            for _, part in pairs(vehicle:GetDescendants()) do
                if part:IsA("VehicleSeat") then
                    part.MaxSpeed = Settings.Movement.VehicleMods.Speed
                    part.TurnSpeed = Settings.Movement.VehicleMods.Speed / 2
                end
            end
        end
    end

    return {
        SetupFly = SetupFly,
        UpdateFly = UpdateFly,
        TPWalk = TPWalk,
        ApplyAntiSlip = ApplyAntiSlip,
        ModifyVehicle = ModifyVehicle
    }
end

-- Advanced Auto Pass System
local function InitializeAutoPass()
    local lastTarget = nil
    local returnPosition = nil
    
    local function GetTargetScore(player)
        local score = 0
        local distance = (LocalPlayer.Character.HumanoidRootPart.Position - player.Character.HumanoidRootPart.Position).Magnitude
        
        -- Distance scoring
        score = score + (1000 - distance)
        
        -- Health scoring
        if player.Character:FindFirstChild("Humanoid") then
            score = score + player.Character.Humanoid.Health
        end
        
        -- Priority player bonus
        if table.find(Settings.Players.Priorities, player.Name) then
            score = score + 2000
        end
        
        -- Blacklist penalty
        if table.find(Settings.AutoPass.BlacklistedPlayers, player.Name) then
            score = score - 5000
        end
        
        return score
    end

    local function PredictPlayerPosition(player)
        local hrp = player.Character.HumanoidRootPart
        local velocity = hrp.Velocity
        return hrp.Position + (velocity * Settings.AutoPass.PassDelay)
    end

    local function GetBestTarget()
        local bestTarget = nil
        local bestScore = -math.huge
        
        for _, player in pairs(Players:GetPlayers()) do
            if player ~= LocalPlayer and player.Character and 
               player.Character:FindFirstChild("HumanoidRootPart") and
               player.Character:FindFirstChild("Humanoid") and
               player.Character.Humanoid.Health > 0 then
                
                local distance = (LocalPlayer.Character.HumanoidRootPart.Position - 
                                player.Character.HumanoidRootPart.Position).Magnitude
                
                if distance <= Settings.AutoPass.DetectionRange then
                    local score = GetTargetScore(player)
                    
                    if Settings.AutoPass.AvoidRepeat and player == lastTarget then
                        score = score - 1000
                    end
                    
                    if score > bestScore then
                        bestScore = score
                        bestTarget = player
                    end
                end
            end
        end
        
        return bestTarget
    end

    local function ExecutePass(target)
        if target then
            returnPosition = LocalPlayer.Character.HumanoidRootPart.Position
            
            local targetPos = Settings.AutoPass.PredictMovement and 
                             PredictPlayerPosition(target) or 
                             target.Character.HumanoidRootPart.Position
            
            if Settings.AutoPass.SmoothTP then
                local tween = TweenService:Create(
                    LocalPlayer.Character.HumanoidRootPart,
                    TweenInfo.new(Settings.AutoPass.PassDelay, Enum.EasingStyle.Quad),
                    {CFrame = CFrame.new(targetPos)}
                )
                tween:Play()
            else
                LocalPlayer.Character.HumanoidRootPart.CFrame = CFrame.new(targetPos)
            end
            
            lastTarget = target
            
            if Settings.AutoPass.AutoReturn.Enabled then
                task.delay(Settings.AutoPass.AutoReturn.Delay, function()
                    if returnPosition then
                        LocalPlayer.Character.HumanoidRootPart.CFrame = CFrame.new(returnPosition)
                        returnPosition = nil
                    end
                end)
            end
        end
    end

    return {
        GetBestTarget = GetBestTarget,
        ExecutePass = ExecutePass
    }
end

-- Combat System
local function InitializeCombat()
    local function IsInDanger()
        for _, player in pairs(Players:GetPlayers()) do
            if player ~= LocalPlayer and player.Character then
                local distance = (LocalPlayer.Character.HumanoidRootPart.Position - 
                                player.Character.HumanoidRootPart.Position).Magnitude
                if distance < Settings.Combat.SafeDistance then
                    return true, player
                end
            end
        end
        return false, nil
    end

    local function DodgePlayer(player)
        if player and Settings.Combat.AutoDodge then
            local dodgeDirection = (LocalPlayer.Character.HumanoidRootPart.Position - 
                                  player.Character.HumanoidRootPart.Position).Unit
            local dodgePosition = LocalPlayer.Character.HumanoidRootPart.Position + 
                                (dodgeDirection * (Settings.Combat.SafeDistance + 5))
            
            LocalPlayer.Character.HumanoidRootPart.CFrame = CFrame.new(dodgePosition)
        end
    end

    local function AutoBlock()
        if Settings.Combat.AutoBlock then
            -- Implement game-specific blocking mechanism
        end
    end

    local function AutoCounter()
        if Settings.Combat.AutoCounter then
            -- Implement game-specific counter mechanism
        end
    end

    return {
        IsInDanger = IsInDanger,
        DodgePlayer = DodgePlayer,
        AutoBlock = AutoBlock,
        AutoCounter = AutoCounter
    }
end

-- UI Implementation
local Window = OrionLib:MakeWindow({
    Name = "Pass The Bomb v1.2.13",
    HidePremium = false,
    SaveConfig = true,
    ConfigFolder = "PTBConfig",
    IntroEnabled = true,
    IntroText = "Pass The Bomb v1.2.13"
})

-- Create All Tabs
local VisualTab = Window:MakeTab({Name = "Visuals", Icon = "rbxassetid://4483345998"})
local HitboxTab = Window:MakeTab({Name = "Hitbox", Icon = "rbxassetid://4483345998"})
local MovementTab = Window:MakeTab({Name = "Movement", Icon = "rbxassetid://4483345998"})
local AutoTab = Window:MakeTab({Name = "Auto Features", Icon = "rbxassetid://4483345998"})
local CombatTab = Window:MakeTab({Name = "Combat", Icon = "rbxassetid://4483345998"})
local PlayersTab = Window:MakeTab({Name = "Players", Icon = "rbxassetid://4483345998"})
local SettingsTab = Window:MakeTab({Name = "Settings", Icon = "rbxassetid://4483345998"})
local DebugTab = Window:MakeTab({Name = "Debug", Icon = "rbxassetid://4483345998"})
local CreditsTab = Window:MakeTab({Name = "Credits", Icon = "rbxassetid://4483345998"})

-- Visual Tab Elements
VisualTab:AddToggle({
    Name = "Enable ESP",
    Default = false,
    Callback = function(Value)
        Settings.ESP.Enabled = Value
    end
})

VisualTab:AddToggle({
    Name = "Box ESP",
    Default = false,
    Callback = function(Value)
        Settings.ESP.BoxESP = Value
    end
})

VisualTab:AddToggle({
    Name = "Chams",
    Default = false,
    Callback = function(Value)
        Settings.ESP.ChamsESP = Value
    end
})

VisualTab:AddToggle({
    Name = "Tracers",
    Default = false,
    Callback = function(Value)
        Settings.ESP.TracerESP = Value
    end
})

VisualTab:AddToggle({
    Name = "Skeleton ESP",
    Default = false,
    Callback = function(Value)
        Settings.ESP.SkeletonESP = Value
    end
})

VisualTab:AddToggle({
    Name = "Head Dots",
    Default = false,
    Callback = function(Value)
        Settings.ESP.HeadDotESP = Value
    end
})

VisualTab:AddToggle({
    Name = "Health Bars",
    Default = false,
    Callback = function(Value)
        Settings.ESP.HealthBarESP = Value
    end
})

VisualTab:AddToggle({
    Name = "Tool ESP",
    Default = false,
    Callback = function(Value)
        Settings.ESP.ToolESP = Value
    end
})

VisualTab:AddToggle({
    Name = "Rainbow ESP",
    Default = false,
    Callback = function(Value)
        Settings.ESP.RainbowESP = Value
    end
})

VisualTab:AddColorpicker({
    Name = "ESP Color",
    Default = Color3.fromRGB(255,0,0),
    Callback = function(Value)
        Settings.ESP.BoxColor = Value
        Settings.ESP.TracerColor = Value
        Settings.ESP.HeadDotColor = Value
    end
})

-- Hitbox Tab Elements
HitboxTab:AddToggle({
    Name = "Regular Hitbox",
    Default = false,
    Callback = function(Value)
        Settings.Hitbox.Regular.Enabled = Value
    end
})

HitboxTab:AddToggle({
    Name = "Alternative Method",
    Default = false,
    Callback = function(Value)
        Settings.Hitbox.Alternative.Enabled = Value
    end
})

HitboxTab:AddToggle({
    Name = "Advanced Hitbox",
    Default = false,
    Callback = function(Value)
        Settings.Hitbox.Advanced.Enabled = Value
    end
})

HitboxTab:AddToggle({
    Name = "Remove Self Hitbox",
    Default = false,
    Callback = function(Value)
        Settings.Hitbox.RemoveSelf = Value
    end
})

HitboxTab:AddToggle({
    Name = "Show Hitbox",
    Default = false,
    Callback = function(Value)
        Settings.Hitbox.ShowHitbox = Value
    end
})

HitboxTab:AddToggle({
    Name = "Rainbow Hitbox",
    Default = false,
    Callback = function(Value)
        Settings.Hitbox.RainbowHitbox = Value
    end
})

-- Movement Tab Elements
MovementTab:AddToggle({
    Name = "TP Walk",
    Default = false,
    Callback = function(Value)
        Settings.Movement.TPWalk.Enabled = Value
    end
})

MovementTab:AddToggle({
    Name = "Fly",
    Default = false,
    Callback = function(Value)
        Settings.Movement.Fly.Enabled = Value
    end
})

MovementTab:AddToggle({
    Name = "Noclip",
    Default = false,
    Callback = function(Value)
        Settings.Movement.Noclip = Value
    end
})

MovementTab:AddToggle({
    Name = "Infinite Jump",
    Default = false,
    Callback = function(Value)
        Settings.Movement.InfiniteJump = Value
    end
})

MovementTab:AddToggle({
    Name = "Loop WalkSpeed",
    Default = false,
    Callback = function(Value)
        Settings.Movement.LoopWS = Value
    end
})

MovementTab:AddToggle({
    Name = "Anti-Slip",
    Default = false,
    Callback = function(Value)
        Settings.Movement.AntiSlip = Value
    end
})

MovementTab:AddToggle({
    Name = "Vehicle Mods",
    Default = false,
    Callback = function(Value)
        Settings.Movement.VehicleMods.Enabled = Value
    end
})

MovementTab:AddSlider({
    Name = "WalkSpeed",
    Min = 16,
    Max = 500,
    Default = 16,
    Color = Color3.fromRGB(255,255,255),
    Increment = 1,
    ValueName = "speed",
    Callback = function(Value)
        Settings.Movement.WalkSpeed = Value
    end
})

MovementTab:AddSlider({
    Name = "Fly Speed",
    Min = 1,
    Max = 200,
    Default = 50,
    Color = Color3.fromRGB(255,255,255),
    Increment = 1,
    ValueName = "speed",
    Callback = function(Value)
        Settings.Movement.Fly.Speed = Value
    end
})

-- Auto Features Tab
AutoTab:AddToggle({
    Name = "Auto Pass",
    Default = false,
    Callback = function(Value)
        Settings.AutoPass.Enabled = Value
    end
})

AutoTab:AddToggle({
    Name = "Smooth TP",
    Default = true,
    Callback = function(Value)
        Settings.AutoPass.SmoothTP = Value
    end
})

AutoTab:AddToggle({
    Name = "Predict Movement",
    Default = false,
    Callback = function(Value)
        Settings.AutoPass.PredictMovement = Value
    end
})

AutoTab:AddToggle({
    Name = "Auto Return",
    Default = false,
    Callback = function(Value)
        Settings.AutoPass.AutoReturn.Enabled = Value
    end
})

AutoTab:AddSlider({
    Name = "Pass Delay",
    Min = 0.01,
    Max = 1,
    Default = 0.05,
    Color = Color3.fromRGB(255,255,255),
    Increment = 0.01,
    ValueName = "seconds",
    Callback = function(Value)
        Settings.AutoPass.PassDelay = Value
    end
})

-- Main Loops
local MovementSystem = InitializeMovement()
local AutoPassSystem = InitializeAutoPass()
local CombatSystem = InitializeCombat()

RunService.RenderStepped:Connect(function()
    if Settings.ESP.Enabled then
        UpdateESP()
    end
    
    if Settings.Hitbox.Regular.Enabled or Settings.Hitbox.Alternative.Enabled then
        UpdateHitboxes()
    end
    
    if Settings.Movement.TPWalk.Enabled then
        MovementSystem.TPWalk()
    end
    
    if Settings.Movement.Fly.Enabled then
        local bp = MovementSystem.SetupFly()
        MovementSystem.UpdateFly(bp)
    end
    
    if Settings.Movement.AntiSlip then
        MovementSystem.ApplyAntiSlip()
    end
    
    if Settings.AutoPass.Enabled and HasBomb() then
        local target = AutoPassSystem.GetBestTarget()
        AutoPassSystem.ExecutePass(target)
    end
    
    if Settings.Combat.AutoDodge then
        local inDanger, threat = CombatSystem.IsInDanger()
        if inDanger then
            CombatSystem.DodgePlayer(threat)
        end
    end
end)

-- UI Toggle and Cleanup
UserInputService.InputBegan:Connect(function(input)
    if input.KeyCode == Settings.UI.ToggleKey then
        OrionLib:ToggleUI()
    elseif input.KeyCode == Settings.UI.FastClose then
        OrionLib:Destroy()
    end
end)

-- Credits
CreditsTab:AddLabel("Github: bavly-code")
CreditsTab:AddLabel("Discord: .trashynoob")
CreditsTab:AddLabel("Version: 1.2.13")

-- Configuration Management System
local function SaveConfig()
    if Settings.Config.AutoSave then
        local configData = HttpService:JSONEncode(Settings)
        writefile(Settings.Config.ConfigFolder .. "/" .. Settings.Config.ConfigName .. ".json", configData)
        Settings.Config.LastSave = tick()
    end
end

local function LoadConfig()
    if Settings.Config.LoadOnLaunch then
        local success, configData = pcall(function()
            return readfile(Settings.Config.ConfigFolder .. "/" .. Settings.Config.ConfigName .. ".json")
        end)
        
        if success then
            local decoded = HttpService:JSONDecode(configData)
            for key, value in pairs(decoded) do
                Settings[key] = value
            end
        end
    end
end

-- Debug System
local function UpdateDebug()
    if Settings.Debug.Enabled then
        if Settings.Debug.ShowFPS then
            local fps = math.round(1/RunService.RenderStepped:Wait())
            -- Update FPS counter
        end
        
        if Settings.Debug.ShowPing then
            local ping = game:GetService("Stats").Network.ServerStatsItem["Data Ping"]:GetValue()
            -- Update ping display
        end
        
        if Settings.Debug.ShowPosition then
            local position = LocalPlayer.Character and LocalPlayer.Character.HumanoidRootPart.Position
            -- Update position display
        end
    end
end

-- Cleanup Handler
local function CleanupScript()
    -- Clear ESP
    for _, espData in pairs(ESPCache) do
        for _, drawing in pairs(espData) do
            if typeof(drawing) == "table" then
                for _, subDrawing in pairs(drawing) do
                    if subDrawing.Remove then
                        subDrawing:Remove()
                    end
                end
            elseif drawing.Remove then
                drawing:Remove()
            end
        end
    end
    
    -- Clear Chams
    for _, highlight in pairs(ChamsCache) do
        highlight:Destroy()
    end
    
    -- Clear Hitboxes
    for _, hitbox in pairs(HitboxCache) do
        hitbox:Destroy()
    end
    
    -- Clear Connections
    for _, connection in pairs(ConnectionCache) do
        connection:Disconnect()
    end
    
    -- Save final config
    SaveConfig()
end

-- Initialize Everything
LoadConfig()
InitializeESP()

-- Auto-save loop
task.spawn(function()
    while task.wait(Settings.Config.SaveInterval) do
        SaveConfig()
    end
end)

-- Debug loop
task.spawn(function()
    while task.wait(1) do
        if Settings.Debug.Enabled then
            UpdateDebug()
        end
    end
end)

-- Cleanup on script end
game:GetService("CoreGui").ChildRemoved:Connect(function(child)
    if child.Name == "OrionLib" then
        CleanupScript()
    end
end)

-- Final initialization message
print("Pass The Bomb v1.2.13 loaded successfully!")
