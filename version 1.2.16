-- Pass The Bomb v1.2.16
local OrionLib = loadstring(game:HttpGet(('https://raw.githubusercontent.com/shlexware/Orion/main/source')))()
local Players = game:GetService("Players")
local RunService = game:GetService("RunService")
local UserInputService = game:GetService("UserInputService")
local TweenService = game:GetService("TweenService")
local HttpService = game:GetService("HttpService")
local CoreGui = game:GetService("CoreGui")
local VirtualUser = game:GetService("VirtualUser")
local LocalPlayer = Players.LocalPlayer
local Camera = workspace.CurrentCamera
local Mouse = LocalPlayer:GetMouse()

-- Complete Settings System
getgenv().Settings = {
    ESP = {
        Enabled = false,
        BoxESP = false,
        ChamsESP = false,
        TracerESP = false,
        SkeletonESP = false,
        HeadDotESP = false,
        HealthBarESP = false,
        ToolESP = false,
        TeamCheck = false,
        ShowDistance = false,
        ShowNames = false,
        ShowHealth = false,
        RainbowESP = false,
        BoxColor = Color3.fromRGB(255,0,0),
        ChamsColor = Color3.fromRGB(255,0,0),
        TracerColor = Color3.fromRGB(255,0,0),
        SkeletonColor = Color3.fromRGB(255,255,255),
        HeadDotColor = Color3.fromRGB(255,0,0),
        HealthBarColor = Color3.fromRGB(0,255,0),
        FillTransparency = 0.5,
        OutlineTransparency = 0,
        TracerOrigin = "Bottom",
        RenderDistance = 1000,
        TextSize = 13,
        TextFont = 2,
        BoxThickness = 1,
        TracerThickness = 1,
        SkeletonThickness = 1,
        CustomText = "",
        ShowTeam = false,
        TeamColor = false,
        HighlightTarget = false,
        TargetColor = Color3.fromRGB(255,255,0)
    },
    Hitbox = {
        Regular = {
            Enabled = false,
            Size = Vector3.new(10, 10, 10),
            Transparency = 0.7,
            TeamCheck = false,
            Color = Color3.fromRGB(255,0,0)
        },
        Alternative = {
            Enabled = false,
            Size = Vector3.new(15, 15, 15),
            TouchPart = true,
            CustomPart = false,
            PartProperties = {
                CanCollide = false,
                Massless = true,
                Transparency = 1
            }
        },
        Advanced = {
            Enabled = false,
            HeadSize = Vector3.new(8, 8, 8),
            TorsoSize = Vector3.new(10, 10, 10),
            ArmsSize = Vector3.new(6, 6, 6),
            LegsSize = Vector3.new(6, 6, 6),
            CustomSizes = {}
        }
    },
    Movement = {
        WalkSpeed = 16,
        JumpPower = 50,
        TPWalk = {
            Enabled = false,
            Speed = 3,
            Method = "Regular",
            BypassCheck = false,
            CustomDistance = 5
        },
        Fly = {
            Enabled = false,
            Speed = 50,
            Method = "Regular",
            NoClip = true,
            Height = 0,
            Smooth = false
        },
        Noclip = false,
        InfiniteJump = false,
        SpeedBoost = false,
        CustomSpeed = 1,
        SpeedMultiplier = 1,
        HeightBoost = 0,
        GravityMultiplier = 1
    },
    Combat = {
        AimAssist = {
            Enabled = false,
            Strength = 0.5,
            FOV = 100,
            Smoothness = 0.5,
            PredictMovement = true,
            VisibilityCheck = true,
            TeamCheck = false,
            Priority = "Distance"
        },
        AutoDodge = false,
        AutoBlock = false,
        AutoHeal = false,
        HealThreshold = 50,
        SafeDistance = 10
    },
    AutoPass = {
        Enabled = false,
        SmoothTP = true,
        ReturnToSpawn = true,
        PassDelay = 0.05,
        DetectionRange = 15,
        AvoidRepeat = true,
        SmartTarget = true,
        PredictMovement = false,
        TargetPriority = "Distance",
        SafeMode = false
    },
    UI = {
        Theme = "Default",
        CustomColors = {
            Background = Color3.fromRGB(30, 30, 30),
            Text = Color3.fromRGB(255, 255, 255),
            Border = Color3.fromRGB(20, 20, 20),
            Accent = Color3.fromRGB(0, 85, 255)
        },
        ToggleKey = Enum.KeyCode.RightControl,
        MinimizeKey = Enum.KeyCode.RightAlt,
        FastClose = Enum.KeyCode.End,
        Transparency = 0.95,
        ShowKeybinds = true,
        ShowWatermark = true
    },
    Debug = {
        Enabled = false,
        ShowFPS = false,
        ShowPing = false,
        ShowPosition = false,
        LogActions = false
    }
}

-- Cache Systems
local ESPCache = {
    Boxes = {},
    Tracers = {},
    Names = {},
    Health = {},
    Distance = {},
    Skeletons = {},
    HeadDots = {},
    Tools = {},
    CustomText = {},
    HighlightCache = {}
}

local ChamsCache = {}
local HitboxCache = {}
local ConnectionCache = {}

-- Utility Functions
local Utility = {
    IsAlive = function(player)
        return player and player.Character and 
               player.Character:FindFirstChild("Humanoid") and 
               player.Character:FindFirstChild("HumanoidRootPart") and
               player.Character.Humanoid.Health > 0
    end,
    
    GetDistance = function(pos1, pos2)
        return (pos1 - pos2).Magnitude
    end,
    
    IsVisible = function(part)
        local ray = Ray.new(Camera.CFrame.Position, (part.Position - Camera.CFrame.Position).Unit * 2048)
        local hit = workspace:FindPartOnRayWithIgnoreList(ray, {LocalPlayer.Character, Camera})
        return not hit
    end,
    
    GetClosestPlayer = function(maxDistance)
        local closest, minDistance = nil, maxDistance or math.huge
        for _, player in pairs(Players:GetPlayers()) do
            if player ~= LocalPlayer and Utility.IsAlive(player) then
                local distance = Utility.GetDistance(LocalPlayer.Character.HumanoidRootPart.Position,
                                                  player.Character.HumanoidRootPart.Position)
                if distance < minDistance then
                    closest = player
                    minDistance = distance
                end
            end
        end
        return closest, minDistance
    end
}

-- Drawing Functions
local function CreateDrawing(type, properties)
    local drawing = Drawing.new(type)
    for property, value in pairs(properties) do
        drawing[property] = value
    end
    return drawing
end
-- Complete ESP Implementation
local function InitializeESP()
    for _, player in pairs(Players:GetPlayers()) do
        if player ~= LocalPlayer then
            -- Box ESP
            ESPCache.Boxes[player] = {
                Box = CreateDrawing("Square", {
                    Visible = false,
                    Color = Settings.ESP.BoxColor,
                    Thickness = Settings.ESP.BoxThickness,
                    Filled = false,
                    Transparency = 1
                }),
                Outline = CreateDrawing("Square", {
                    Visible = false,
                    Color = Color3.new(0,0,0),
                    Thickness = Settings.ESP.BoxThickness + 2,
                    Filled = false,
                    Transparency = 1
                })
            }
            
            -- Skeleton ESP
            ESPCache.Skeletons[player] = {
                Head = CreateDrawing("Line", {
                    Visible = false,
                    Color = Settings.ESP.SkeletonColor,
                    Thickness = Settings.ESP.SkeletonThickness,
                    Transparency = 1
                }),
                UpperTorso = CreateDrawing("Line", {
                    Visible = false,
                    Color = Settings.ESP.SkeletonColor,
                    Thickness = Settings.ESP.SkeletonThickness,
                    Transparency = 1
                }),
                LowerTorso = CreateDrawing("Line", {
                    Visible = false,
                    Color = Settings.ESP.SkeletonColor,
                    Thickness = Settings.ESP.SkeletonThickness,
                    Transparency = 1
                }),
                LeftUpperArm = CreateDrawing("Line", {
                    Visible = false,
                    Color = Settings.ESP.SkeletonColor,
                    Thickness = Settings.ESP.SkeletonThickness,
                    Transparency = 1
                }),
                LeftLowerArm = CreateDrawing("Line", {
                    Visible = false,
                    Color = Settings.ESP.SkeletonColor,
                    Thickness = Settings.ESP.SkeletonThickness,
                    Transparency = 1
                }),
                RightUpperArm = CreateDrawing("Line", {
                    Visible = false,
                    Color = Settings.ESP.SkeletonColor,
                    Thickness = Settings.ESP.SkeletonThickness,
                    Transparency = 1
                }),
                RightLowerArm = CreateDrawing("Line", {
                    Visible = false,
                    Color = Settings.ESP.SkeletonColor,
                    Thickness = Settings.ESP.SkeletonThickness,
                    Transparency = 1
                }),
                LeftUpperLeg = CreateDrawing("Line", {
                    Visible = false,
                    Color = Settings.ESP.SkeletonColor,
                    Thickness = Settings.ESP.SkeletonThickness,
                    Transparency = 1
                }),
                LeftLowerLeg = CreateDrawing("Line", {
                    Visible = false,
                    Color = Settings.ESP.SkeletonColor,
                    Thickness = Settings.ESP.SkeletonThickness,
                    Transparency = 1
                }),
                RightUpperLeg = CreateDrawing("Line", {
                    Visible = false,
                    Color = Settings.ESP.SkeletonColor,
                    Thickness = Settings.ESP.SkeletonThickness,
                    Transparency = 1
                }),
                RightLowerLeg = CreateDrawing("Line", {
                    Visible = false,
                    Color = Settings.ESP.SkeletonColor,
                    Thickness = Settings.ESP.SkeletonThickness,
                    Transparency = 1
                })
            }
            
            -- Tracer ESP
            ESPCache.Tracers[player] = CreateDrawing("Line", {
                Visible = false,
                Color = Settings.ESP.TracerColor,
                Thickness = Settings.ESP.TracerThickness,
                Transparency = 1
            })
            
            -- Head Dot ESP
            ESPCache.HeadDots[player] = CreateDrawing("Circle", {
                Visible = false,
                Color = Settings.ESP.HeadDotColor,
                Thickness = 1,
                NumSides = 30,
                Radius = 3,
                Filled = true,
                Transparency = 1
            })
            
            -- Health Bar ESP
            ESPCache.Health[player] = {
                Bar = CreateDrawing("Square", {
                    Visible = false,
                    Color = Settings.ESP.HealthBarColor,
                    Thickness = 1,
                    Filled = true,
                    Transparency = 1
                }),
                Background = CreateDrawing("Square", {
                    Visible = false,
                    Color = Color3.new(0,0,0),
                    Thickness = 1,
                    Filled = true,
                    Transparency = 1
                })
            }
            
            -- Name ESP
            ESPCache.Names[player] = CreateDrawing("Text", {
                Visible = false,
                Color = Settings.ESP.BoxColor,
                Size = Settings.ESP.TextSize,
                Center = true,
                Outline = true,
                Font = Settings.ESP.TextFont,
                Transparency = 1
            })
            
            -- Distance ESP
            ESPCache.Distance[player] = CreateDrawing("Text", {
                Visible = false,
                Color = Settings.ESP.BoxColor,
                Size = Settings.ESP.TextSize,
                Center = true,
                Outline = true,
                Font = Settings.ESP.TextFont,
                Transparency = 1
            })
            
            -- Tool ESP
            ESPCache.Tools[player] = CreateDrawing("Text", {
                Visible = false,
                Color = Settings.ESP.BoxColor,
                Size = Settings.ESP.TextSize,
                Center = true,
                Outline = true,
                Font = Settings.ESP.TextFont,
                Transparency = 1
            })
            
            -- Chams ESP
            if Settings.ESP.ChamsESP then
                local highlight = Instance.new("Highlight")
                highlight.FillColor = Settings.ESP.ChamsColor
                highlight.OutlineColor = Color3.new(1,1,1)
                highlight.FillTransparency = Settings.ESP.FillTransparency
                highlight.OutlineTransparency = Settings.ESP.OutlineTransparency
                highlight.Adornee = player.Character
                highlight.Parent = CoreGui
                
                ChamsCache[player] = highlight
            end
        end
    end
end
-- Complete ESP Update System
local function UpdateESP()
    for player, esp in pairs(ESPCache.Boxes) do
        if Utility.IsAlive(player) and player ~= LocalPlayer then
            local character = player.Character
            local humanoidRootPart = character:FindFirstChild("HumanoidRootPart")
            local humanoid = character:FindFirstChild("Humanoid")
            local head = character:FindFirstChild("Head")
            local distance = Utility.GetDistance(LocalPlayer.Character.HumanoidRootPart.Position, humanoidRootPart.Position)
            
            if distance <= Settings.ESP.RenderDistance then
                local vector, onScreen = Camera:WorldToViewportPoint(humanoidRootPart.Position)
                
                if onScreen then
                    -- Box ESP Update
                    if Settings.ESP.BoxESP then
                        local rootPos = Camera:WorldToViewportPoint(humanoidRootPart.Position)
                        local headPos = Camera:WorldToViewportPoint(head.Position + Vector3.new(0, 0.5, 0))
                        local legPos = Camera:WorldToViewportPoint(humanoidRootPart.Position - Vector3.new(0, 3, 0))
                        
                        local boxSize = Vector2.new(2350 / rootPos.Z, headPos.Y - legPos.Y)
                        local boxPosition = Vector2.new(rootPos.X - boxSize.X / 2, rootPos.Y - boxSize.Y / 2)
                        
                        esp.Box.Size = boxSize
                        esp.Box.Position = boxPosition
                        esp.Outline.Size = boxSize
                        esp.Outline.Position = boxPosition
                        
                        if Settings.ESP.RainbowESP then
                            esp.Box.Color = Color3.fromHSV(tick() % 5 / 5, 1, 1)
                        else
                            esp.Box.Color = Settings.ESP.BoxColor
                        end
                        
                        esp.Box.Visible = true
                        esp.Outline.Visible = true
                    else
                        esp.Box.Visible = false
                        esp.Outline.Visible = false
                    end
                    
                    -- Skeleton ESP Update
                    if Settings.ESP.SkeletonESP then
                        local function UpdateBone(bone1, bone2, drawing)
                            local pos1 = Camera:WorldToViewportPoint(bone1.Position)
                            local pos2 = Camera:WorldToViewportPoint(bone2.Position)
                            
                            drawing.From = Vector2.new(pos1.X, pos1.Y)
                            drawing.To = Vector2.new(pos2.X, pos2.Y)
                            drawing.Color = Settings.ESP.RainbowESP and 
                                Color3.fromHSV(tick() % 5 / 5, 1, 1) or 
                                Settings.ESP.SkeletonColor
                            drawing.Visible = true
                        end
                        
                        local skeleton = ESPCache.Skeletons[player]
                        local torso = character:FindFirstChild("UpperTorso")
                        local lowerTorso = character:FindFirstChild("LowerTorso")
                        local leftUpperArm = character:FindFirstChild("LeftUpperArm")
                        local leftLowerArm = character:FindFirstChild("LeftLowerArm")
                        local rightUpperArm = character:FindFirstChild("RightUpperArm")
                        local rightLowerArm = character:FindFirstChild("RightLowerArm")
                        local leftUpperLeg = character:FindFirstChild("LeftUpperLeg")
                        local leftLowerLeg = character:FindFirstChild("LeftLowerLeg")
                        local rightUpperLeg = character:FindFirstChild("RightUpperLeg")
                        local rightLowerLeg = character:FindFirstChild("RightLowerLeg")
                        
                        if torso and head then
                            UpdateBone(torso, head, skeleton.Head)
                        end
                        if torso and lowerTorso then
                            UpdateBone(torso, lowerTorso, skeleton.UpperTorso)
                        end
                        if leftUpperArm and torso then
                            UpdateBone(leftUpperArm, torso, skeleton.LeftUpperArm)
                        end
                        if leftUpperArm and leftLowerArm then
                            UpdateBone(leftUpperArm, leftLowerArm, skeleton.LeftLowerArm)
                        end
                        if rightUpperArm and torso then
                            UpdateBone(rightUpperArm, torso, skeleton.RightUpperArm)
                        end
                        if rightUpperArm and rightLowerArm then
                            UpdateBone(rightUpperArm, rightLowerArm, skeleton.RightLowerArm)
                        end
                        if leftUpperLeg and lowerTorso then
                            UpdateBone(leftUpperLeg, lowerTorso, skeleton.LeftUpperLeg)
                        end
                        if leftUpperLeg and leftLowerLeg then
                            UpdateBone(leftUpperLeg, leftLowerLeg, skeleton.LeftLowerLeg)
                        end
                        if rightUpperLeg and lowerTorso then
                            UpdateBone(rightUpperLeg, lowerTorso, skeleton.RightUpperLeg)
                        end
                        if rightUpperLeg and rightLowerLeg then
                            UpdateBone(rightUpperLeg, rightLowerLeg, skeleton.RightLowerLeg)
                        end
                    else
                        for _, drawing in pairs(ESPCache.Skeletons[player]) do
                            drawing.Visible = false
                        end
                    end
                    -- Tracer ESP Update
                    if Settings.ESP.TracerESP then
                        local tracer = ESPCache.Tracers[player]
                        local tracerStart = Vector2.new(Camera.ViewportSize.X / 2, Camera.ViewportSize.Y)
                        
                        if Settings.ESP.TracerOrigin == "Mouse" then
                            tracerStart = Vector2.new(Mouse.X, Mouse.Y)
                        elseif Settings.ESP.TracerOrigin == "Top" then
                            tracerStart = Vector2.new(Camera.ViewportSize.X / 2, 0)
                        end
                        
                        tracer.From = tracerStart
                        tracer.To = Vector2.new(vector.X, vector.Y)
                        tracer.Color = Settings.ESP.RainbowESP and 
                            Color3.fromHSV(tick() % 5 / 5, 1, 1) or 
                            Settings.ESP.TracerColor
                        tracer.Visible = true
                    else
                        ESPCache.Tracers[player].Visible = false
                    end
                    
                    -- Head Dot ESP Update
                    if Settings.ESP.HeadDotESP then
                        local headPos = Camera:WorldToViewportPoint(head.Position)
                        local headDot = ESPCache.HeadDots[player]
                        
                        headDot.Position = Vector2.new(headPos.X, headPos.Y)
                        headDot.Color = Settings.ESP.RainbowESP and 
                            Color3.fromHSV(tick() % 5 / 5, 1, 1) or 
                            Settings.ESP.HeadDotColor
                        headDot.Visible = true
                    else
                        ESPCache.HeadDots[player].Visible = false
                    end
                    
                    -- Health Bar ESP Update
                    if Settings.ESP.HealthBarESP then
                        local health = ESPCache.Health[player]
                        local healthPercent = humanoid.Health / humanoid.MaxHealth
                        local barHeight = esp.Box.Size.Y
                        local barPosition = Vector2.new(esp.Box.Position.X - 6, esp.Box.Position.Y)
                        
                        health.Background.Size = Vector2.new(4, barHeight)
                        health.Background.Position = barPosition
                        health.Background.Visible = true
                        
                        health.Bar.Size = Vector2.new(4, barHeight * healthPercent)
                        health.Bar.Position = Vector2.new(barPosition.X, barPosition.Y + barHeight * (1 - healthPercent))
                        health.Bar.Color = Color3.fromRGB(
                            255 * (1 - healthPercent),
                            255 * healthPercent,
                            0
                        )
                        health.Bar.Visible = true
                    else
                        ESPCache.Health[player].Background.Visible = false
                        ESPCache.Health[player].Bar.Visible = false
                    end
                    
                    -- Name ESP Update
                    if Settings.ESP.ShowNames then
                        local name = ESPCache.Names[player]
                        name.Text = player.Name
                        name.Position = Vector2.new(vector.X, vector.Y - esp.Box.Size.Y / 2 - 15)
                        name.Color = Settings.ESP.RainbowESP and 
                            Color3.fromHSV(tick() % 5 / 5, 1, 1) or 
                            Settings.ESP.BoxColor
                        name.Visible = true
                    else
                        ESPCache.Names[player].Visible = false
                    end
                    
                    -- Distance ESP Update
                    if Settings.ESP.ShowDistance then
                        local distanceText = ESPCache.Distance[player]
                        distanceText.Text = math.floor(distance) .. " studs"
                        distanceText.Position = Vector2.new(vector.X, vector.Y + esp.Box.Size.Y / 2 + 5)
                        distanceText.Color = Settings.ESP.RainbowESP and 
                            Color3.fromHSV(tick() % 5 / 5, 1, 1) or 
                            Settings.ESP.BoxColor
                        distanceText.Visible = true
                    else
                        ESPCache.Distance[player].Visible = false
                    end
    -- Complete GUI Implementation
    local Window = OrionLib:MakeWindow({
        Name = "Pass The Bomb v1.2.16",
        HidePremium = false,
        SaveConfig = true,
        ConfigFolder = "PTBConfigs",
        IntroEnabled = true,
        IntroText = "Pass The Bomb v1.2.16",
        IntroIcon = "rbxassetid://7733955740"
    })

    -- Combat Tab
    local CombatTab = Window:MakeTab({Name = "Combat", Icon = "rbxassetid://7733774602"})
    
    local AimSection = CombatTab:AddSection({Name = "Aim Assist"})
    
    AimSection:AddToggle({
        Name = "Enable Aim Assist",
        Default = false,
        Callback = function(Value)
            Settings.Combat.AimAssist.Enabled = Value
        end
    })
    
    AimSection:AddSlider({
        Name = "Aim Strength",
        Min = 0,
        Max = 100,
        Default = 50,
        Color = Color3.fromRGB(255,255,255),
        Increment = 1,
        ValueName = "%",
        Callback = function(Value)
            Settings.Combat.AimAssist.Strength = Value/100
        end    
    })
    
    AimSection:AddSlider({
        Name = "FOV",
        Min = 0,
        Max = 800,
        Default = 100,
        Color = Color3.fromRGB(255,255,255),
        Increment = 1,
        ValueName = "px",
        Callback = function(Value)
            Settings.Combat.AimAssist.FOV = Value
        end    
    })
    
    -- Visual Tab
    local VisualTab = Window:MakeTab({Name = "Visual", Icon = "rbxassetid://7733774602"})
    
    local ESPSection = VisualTab:AddSection({Name = "ESP Settings"})
    
    ESPSection:AddToggle({
        Name = "Enable ESP",
        Default = false,
        Callback = function(Value)
            Settings.ESP.Enabled = Value
        end
    })
    
    ESPSection:AddToggle({
        Name = "Box ESP",
        Default = false,
        Callback = function(Value)
            Settings.ESP.BoxESP = Value
        end
    })
    
    ESPSection:AddToggle({
        Name = "Skeleton ESP",
        Default = false,
        Callback = function(Value)
            Settings.ESP.SkeletonESP = Value
        end
    })
    
    ESPSection:AddToggle({
        Name = "Tracer ESP",
        Default = false,
        Callback = function(Value)
            Settings.ESP.TracerESP = Value
        end
    })
    
    ESPSection:AddToggle({
        Name = "Head Dot",
        Default = false,
        Callback = function(Value)
            Settings.ESP.HeadDotESP = Value
        end
    })
    
    ESPSection:AddToggle({
        Name = "Health Bar",
        Default = false,
        Callback = function(Value)
            Settings.ESP.HealthBarESP = Value
        end
    })
    
    ESPSection:AddToggle({
        Name = "Show Names",
        Default = false,
        Callback = function(Value)
            Settings.ESP.ShowNames = Value
        end
    })
    
    ESPSection:AddToggle({
        Name = "Show Distance",
        Default = false,
        Callback = function(Value)
            Settings.ESP.ShowDistance = Value
        end
    })
    
    ESPSection:AddToggle({
        Name = "Rainbow ESP",
        Default = false,
        Callback = function(Value)
            Settings.ESP.RainbowESP = Value
        end
    })
    
    ESPSection:AddColorpicker({
        Name = "ESP Color",
        Default = Color3.fromRGB(255, 0, 0),
        Callback = function(Value)
            Settings.ESP.BoxColor = Value
            Settings.ESP.TracerColor = Value
            Settings.ESP.HeadDotColor = Value
        end
    })
    -- Movement Tab
    local MovementTab = Window:MakeTab({Name = "Movement", Icon = "rbxassetid://7733774602"})
    
    local SpeedSection = MovementTab:AddSection({Name = "Speed Settings"})
    
    SpeedSection:AddToggle({
        Name = "Speed Boost",
        Default = false,
        Callback = function(Value)
            Settings.Movement.SpeedBoost = Value
        end
    })
    
    SpeedSection:AddSlider({
        Name = "Walk Speed",
        Min = 16,
        Max = 500,
        Default = 16,
        Color = Color3.fromRGB(255,255,255),
        Increment = 1,
        ValueName = "",
        Callback = function(Value)
            Settings.Movement.WalkSpeed = Value
        end    
    })
    
    SpeedSection:AddSlider({
        Name = "Speed Multiplier",
        Min = 1,
        Max = 10,
        Default = 1,
        Color = Color3.fromRGB(255,255,255),
        Increment = 0.1,
        ValueName = "x",
        Callback = function(Value)
            Settings.Movement.SpeedMultiplier = Value
        end    
    })
    
    local FlySection = MovementTab:AddSection({Name = "Fly Settings"})
    
    FlySection:AddToggle({
        Name = "Enable Fly",
        Default = false,
        Callback = function(Value)
            Settings.Movement.Fly.Enabled = Value
        end
    })
    
    FlySection:AddSlider({
        Name = "Fly Speed",
        Min = 1,
        Max = 200,
        Default = 50,
        Color = Color3.fromRGB(255,255,255),
        Increment = 1,
        ValueName = "",
        Callback = function(Value)
            Settings.Movement.Fly.Speed = Value
        end    
    })
    
    FlySection:AddToggle({
        Name = "Noclip While Flying",
        Default = true,
        Callback = function(Value)
            Settings.Movement.Fly.NoClip = Value
        end
    })
    
    FlySection:AddToggle({
        Name = "Smooth Fly",
        Default = false,
        Callback = function(Value)
            Settings.Movement.Fly.Smooth = Value
        end
    })
    
    local JumpSection = MovementTab:AddSection({Name = "Jump Settings"})
    
    JumpSection:AddToggle({
        Name = "Infinite Jump",
        Default = false,
        Callback = function(Value)
            Settings.Movement.InfiniteJump = Value
        end
    })
    
    JumpSection:AddSlider({
        Name = "Jump Power",
        Min = 50,
        Max = 500,
        Default = 50,
        Color = Color3.fromRGB(255,255,255),
        Increment = 1,
        ValueName = "",
        Callback = function(Value)
            Settings.Movement.JumpPower = Value
        end    
    })
    
    JumpSection:AddSlider({
        Name = "Height Boost",
        Min = 0,
        Max = 100,
        Default = 0,
        Color = Color3.fromRGB(255,255,255),
        Increment = 1,
        ValueName = "",
        Callback = function(Value)
            Settings.Movement.HeightBoost = Value
        end    
    })
    
    -- Auto Pass Tab
    local AutoPassTab = Window:MakeTab({Name = "Auto Pass", Icon = "rbxassetid://7733774602"})
    
    local PassSection = AutoPassTab:AddSection({Name = "Auto Pass Settings"})
    
    PassSection:AddToggle({
        Name = "Enable Auto Pass",
        Default = false,
        Callback = function(Value)
            Settings.AutoPass.Enabled = Value
        end
    })
    -- Auto Pass Settings Continued
    PassSection:AddToggle({
        Name = "Smooth Teleport",
        Default = true,
        Callback = function(Value)
            Settings.AutoPass.SmoothTP = Value
        end
    })
    
    PassSection:AddToggle({
        Name = "Return To Position",
        Default = true,
        Callback = function(Value)
            Settings.AutoPass.ReturnToSpawn = Value
        end
    })
    
    PassSection:AddToggle({
        Name = "Smart Targeting",
        Default = true,
        Callback = function(Value)
            Settings.AutoPass.SmartTarget = Value
        end
    })
    
    PassSection:AddToggle({
        Name = "Predict Movement",
        Default = false,
        Callback = function(Value)
            Settings.AutoPass.PredictMovement = Value
        end
    })
    
    PassSection:AddSlider({
        Name = "Pass Delay",
        Min = 0,
        Max = 1,
        Default = 0.05,
        Color = Color3.fromRGB(255,255,255),
        Increment = 0.01,
        ValueName = "s",
        Callback = function(Value)
            Settings.AutoPass.PassDelay = Value
        end    
    })
    
    PassSection:AddSlider({
        Name = "Detection Range",
        Min = 5,
        Max = 100,
        Default = 15,
        Color = Color3.fromRGB(255,255,255),
        Increment = 1,
        ValueName = "studs",
        Callback = function(Value)
            Settings.AutoPass.DetectionRange = Value
        end    
    })
    
    -- Credits Tab
    local CreditsTab = Window:MakeTab({Name = "Credits", Icon = "rbxassetid://7733774602"})
    
    CreditsTab:AddLabel("Pass The Bomb v1.2.16")
    CreditsTab:AddLabel("Created by [Creator]")
    CreditsTab:AddLabel("UI Library: Orion Library")
    
    CreditsTab:AddParagraph("Special Thanks","Thanks to all contributors and testers!")
    
    CreditsTab:AddButton({
        Name = "Copy Discord Link",
        Callback = function()
            setclipboard("discord.gg/yourserver")
        end
    })
    
    -- Settings Tab
    local SettingsTab = Window:MakeTab({Name = "Settings", Icon = "rbxassetid://7733774602"})
    
    local ConfigSection = SettingsTab:AddSection({Name = "Configuration"})
    
    ConfigSection:AddTextbox({
        Name = "Config Name",
        Default = "default",
        TextDisappear = false,
        Callback = function(Value)
            Settings.Config.CurrentConfig = Value
        end	  
    })
    
    ConfigSection:AddButton({
        Name = "Save Config",
        Callback = function()
            SaveConfig(Settings.Config.CurrentConfig)
        end
    })
    
    ConfigSection:AddButton({
        Name = "Load Config",
        Callback = function()
            LoadConfig(Settings.Config.CurrentConfig)
        end
    })
    
    local UISection = SettingsTab:AddSection({Name = "UI Settings"})
    
    UISection:AddKeybind({
        Name = "Toggle UI",
        Default = Enum.KeyCode.RightControl,
        Hold = false,
        Callback = function()
            OrionLib:ToggleUI()
        end    
    })
    -- Main Loop Implementation
    RunService.RenderStepped:Connect(function()
        if Settings.ESP.Enabled then
            UpdateESP()
        end
        
        if Settings.Combat.AimAssist.Enabled then
            local target = GetAimTarget()
            if target then
                local targetPos = target.Character.Head.Position
                if Settings.Combat.AimAssist.PredictMovement then
                    targetPos = targetPos + (target.Character.HumanoidRootPart.Velocity * 0.1)
                end
                
                local targetCFrame = Camera.CFrame:Lerp(
                    CFrame.new(Camera.CFrame.Position, targetPos),
                    Settings.Combat.AimAssist.Strength * Settings.Combat.AimAssist.Smoothness
                )
                
                Camera.CFrame = targetCFrame
            end
        end
        
        if Settings.Movement.SpeedBoost then
            LocalPlayer.Character.Humanoid.WalkSpeed = Settings.Movement.WalkSpeed * Settings.Movement.SpeedMultiplier
        else
            LocalPlayer.Character.Humanoid.WalkSpeed = Settings.Movement.WalkSpeed
        end
        
        if Settings.Movement.Fly.Enabled then
            local character = LocalPlayer.Character
            local humanoidRootPart = character:FindFirstChild("HumanoidRootPart")
            
            if not flyBP then
                flyBP = Instance.new("BodyPosition")
                flyBP.MaxForce = Vector3.new(math.huge, math.huge, math.huge)
                flyBP.P = 10000
                flyBP.Position = humanoidRootPart.Position
                flyBP.Parent = humanoidRootPart
            end
            
            local forward = Camera.CFrame.LookVector
            local right = Camera.CFrame.RightVector
            local up = Camera.CFrame.UpVector
            local pos = Vector3.new(0,0,0)
            
            -- Movement Controls
            if UserInputService:IsKeyDown(Enum.KeyCode.W) then
                pos = pos + forward
            end
            if UserInputService:IsKeyDown(Enum.KeyCode.S) then
                pos = pos - forward
            end
            if UserInputService:IsKeyDown(Enum.KeyCode.D) then
                pos = pos + right
            end
            if UserInputService:IsKeyDown(Enum.KeyCode.A) then
                pos = pos - right
            end
            if UserInputService:IsKeyDown(Enum.KeyCode.Space) then
                pos = pos + up
            end
            if UserInputService:IsKeyDown(Enum.KeyCode.LeftControl) then
                pos = pos - up
            end
            
            if pos.Magnitude > 0 then
                flyBP.Position = flyBP.Position + (pos.Unit * Settings.Movement.Fly.Speed)
            end
        else
            if flyBP then
                flyBP:Destroy()
                flyBP = nil
            end
        end
        
        if Settings.AutoPass.Enabled and HasBomb() then
            local target = GetBestTarget()
            if target then
                ExecutePass(target)
            end
        end
    end)
    -- Event Connections and Input Handling
    UserInputService.InputBegan:Connect(function(input, gameProcessed)
        if not gameProcessed then
            if input.KeyCode == Settings.UI.ToggleKey then
                OrionLib:ToggleUI()
            end
            
            if input.KeyCode == Enum.KeyCode.Space and Settings.Movement.InfiniteJump then
                LocalPlayer.Character.Humanoid:ChangeState(Enum.HumanoidStateType.Jumping)
            end
        end
    end)
    
    -- Anti-Cheat Bypass Systems
    local function SetupAntiCheat()
        local mt = getrawmetatable(game)
        local oldIndex = mt.__index
        setreadonly(mt, false)
        
        mt.__index = newcclosure(function(self, k)
            if not checkcaller() then
                if k == "WalkSpeed" or k == "JumpPower" then
                    return 16
                end
            end
            return oldIndex(self, k)
        end)
        
        -- Hook network functions
        local network = {
            outgoing = {},
            incoming = {}
        }
        
        for _, v in pairs(getgc()) do
            if type(v) == "function" and islclosure(v) then
                local constants = debug.getconstants(v)
                if table.find(constants, "FireServer") then
                    network.outgoing[v] = true
                elseif table.find(constants, "InvokeServer") then
                    network.incoming[v] = true
                end
            end
        end
    end
    
    -- Hitbox Manipulation System
    local function UpdateHitboxes()
        if Settings.Hitbox.Regular.Enabled then
            for _, player in pairs(Players:GetPlayers()) do
                if player ~= LocalPlayer and Utility.IsAlive(player) then
                    if Settings.Hitbox.Regular.TeamCheck and player.Team == LocalPlayer.Team then
                        continue
                    end
                    
                    local character = player.Character
                    local humanoidRootPart = character:FindFirstChild("HumanoidRootPart")
                    
                    if humanoidRootPart then
                        humanoidRootPart.Size = Settings.Hitbox.Regular.Size
                        humanoidRootPart.Transparency = Settings.Hitbox.Regular.Transparency
                        humanoidRootPart.CanCollide = false
                    end
                end
            end
        end
    end
    
    -- Auto Save System
    local function StartAutoSave()
        while Settings.Config.AutoSave do
            SaveConfig(Settings.Config.CurrentConfig)
            task.wait(Settings.Config.SaveInterval)
        end
    end
    
    -- Initialize Everything
    local function Initialize()
        SetupAntiCheat()
        InitializeESP()
        LoadConfig("default")
        
        if Settings.Config.AutoSave then
            task.spawn(StartAutoSave)
        end
        
        -- Success Notification
        OrionLib:MakeNotification({
            Name = "Pass The Bomb v1.2.16",
            Content = "Script loaded successfully!",
            Image = "rbxassetid://7733955740",
            Time = 5
        })
    end
    
    Initialize()
    
    -- Cleanup on script end
    game:GetService("CoreGui").ChildRemoved:Connect(function(child)
        if child.Name == "Orion" then
            SaveConfig("default")
            CleanupESP()
            if flyBP then
                flyBP:Destroy()
            end
        end
    end)
end

-- Start the script
StartScript()
